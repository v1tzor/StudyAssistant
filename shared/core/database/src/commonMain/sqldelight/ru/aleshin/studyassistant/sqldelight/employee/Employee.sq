import kotlin.String;
import kotlin.collections.List;

CREATE TABLE employeeEntity (
  uid TEXT PRIMARY KEY NOT NULL,
  organization_id TEXT NOT NULL,
  first_name TEXT NOT NULL,
  second_name TEXT,
  patronymic TEXT,
  post TEXT NOT NULL,
  avatar TEXT,
  birthday TEXT,
  workTimeStart INTEGER,
  workTimeEnd INTEGER,
  emails TEXT AS List<String> NOT NULL,
  phones TEXT AS List<String> NOT NULL,
  locations TEXT AS List<String> NOT NULL,
  webs TEXT AS List<String> NOT NULL,
  updated_at INTEGER NOT NULL,
  is_cache_data INTEGER NOT NULL
);

addOrUpdateEmployee:
INSERT OR REPLACE INTO employeeEntity (uid, organization_id, first_name, second_name, patronymic, post, avatar, birthday, workTimeStart, workTimeEnd, emails, phones, locations, webs, updated_at, is_cache_data)
VALUES ?;

fetchEmployeesByOrganization:
SELECT *
FROM employeeEntity
WHERE organization_id = ? AND is_cache_data = ?;

fetchEmployeesByOrganizations:
SELECT *
FROM employeeEntity
WHERE organization_id IN ? AND is_cache_data = ?;


fetchEmployeeById:
SELECT *
FROM employeeEntity
WHERE uid = ? AND is_cache_data = ?;

fetchEmployeesById:
SELECT *
FROM employeeEntity
WHERE uid IN ? AND is_cache_data = ?;

fetchAllEmployees:
SELECT *
FROM employeeEntity
WHERE is_cache_data = ?;

fetchEmptyEmployees:
SELECT uid, updated_at
FROM employeeEntity
WHERE is_cache_data = 1;

deleteEmployeesById:
DELETE FROM employeeEntity
WHERE uid IN ? AND is_cache_data = ?;

deleteAllEmployee:
DELETE FROM employeeEntity
WHERE is_cache_data = ?;