/*
 * Copyright 2024 Stanislav Aleshin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ru.aleshin.studyassistant.auth.impl.presentation.theme.tokens

import androidx.compose.runtime.staticCompositionLocalOf
import ru.aleshin.studyassistant.core.ui.theme.tokens.StudyAssistantLanguage

/**
 * @author Stanislav Aleshin on 14.06.2023.
 */
internal data class AuthStrings(
    val otherSignInWayTitle: String,
    val emailLabel: String,
    val emailPlaceholder: String,
    val passwordLabel: String,
    val passwordPlaceholder: String,
    val usernameLabel: String,
    val usernamePlaceholder: String,
    val forgotPasswordLabel: String,
    val loginDesc: String,
    val loginHeadline: String,
    val loginLabel: String,
    val loginViaGoogleLabel: String,
    val loginViaYandexLabel: String,
    val signUpLabelFirst: String,
    val signUpLabelSecond: String,
    val alreadyHaveAccountLabelFirst: String,
    val alreadyHaveAccountLabelSecond: String,
    val alreadyHavePasswordLabelFirst: String,
    val alreadyHavePasswordLabelSecond: String,
    val registerDesc: String,
    val registerHeadline: String,
    val registerLabel: String,
    val forgotDesc: String,
    val forgotHeadline: String,
    val sendEmailLabel: String,
    val usernameLengthError: String,
    val emailFormatError: String,
    val passwordFormatError: String,
    val hidePasswordDesc: String,
    val showPasswordDesc: String,
    val verificationHeadline: String,
    val verificationTitle: String,
    val verificationButtonLabel: String,
    val retryAvailableTimeLabelPrefix: String,
    val authErrorMessage: String,
    val credentialsErrorMessage: String,
    val userNotFoundErrorMessage: String,
    val tooManyRequestsErrorMessage: String,
    val userAlreadyExistsMessage: String,
    val emailAlreadyUsedMessage: String,
    val passwordRecentlyUsedMessage: String,
    val passwordPersonalDataMessage: String,
    val phoneNotFoundMessage: String,
    val missingIdFromProviderMessage: String,
    val oauthBadRequestMessage: String,
    val jwtInvalidMessage: String,
    val userBlockedMessage: String,
    val emailNotWhitelistedMessage: String,
    val invalidCodeMessage: String,
    val ipNotWhitelistedMessage: String,
    val anonymousConsoleProhibitedMessage: String,
    val sessionAlreadyExistsMessage: String,
    val oauthUnauthorizedMessage: String,
    val teamInvalidSecretMessage: String,
    val teamInviteMismatchMessage: String,
    val sessionNotFoundMessage: String,
    val identityNotFoundMessage: String,
    val teamNotFoundMessage: String,
    val teamInviteNotFoundMessage: String,
    val teamMembershipMismatchMessage: String,
    val membershipNotFoundMessage: String,
    val teamInviteAlreadyExistsMessage: String,
    val teamAlreadyExistsMessage: String,
    val membershipAlreadyConfirmedMessage: String,
    val passwordResetRequiredMessage: String,
    val oauthProviderErrorMessage: String,
    val userCountExceededMessage: String,
    val authMethodUnsupportedMessage: String,
    val networkErrorMessage: String,
    val accessDeniedMessage: String,
    val loginTermsAndConditionsBody: String,
    val registerTermsAndConditionsBody: String,
    val privacyPolicyLabel: String,
    val otherErrorMessage: String,
) {

    companion object {
        val RUSSIAN = AuthStrings(
            otherSignInWayTitle = "Или войдите через",
            emailLabel = "Электронная почта",
            emailPlaceholder = "email@example.com",
            passwordLabel = "Пароль",
            passwordPlaceholder = "Мин. 6 символов (a-Z)(0-9)",
            usernameLabel = "Отображаемое имя",
            usernamePlaceholder = "Имя Фамилия",
            forgotPasswordLabel = "Восстановить пароль",
            loginDesc = "Авторизация",
            loginHeadline = "С возвращением,\nв ваш ассистент!",
            loginLabel = "Войти",
            loginViaGoogleLabel = "Google",
            loginViaYandexLabel = "Yandex",
            signUpLabelFirst = "Нет аккаунта? ",
            signUpLabelSecond = "Зарегистрируйтесь",
            alreadyHaveAccountLabelFirst = "Уже есть аккаунт? ",
            alreadyHaveAccountLabelSecond = "Войдите",
            alreadyHavePasswordLabelFirst = "Уже нашли пароль? ",
            alreadyHavePasswordLabelSecond = "Войдите",
            registerDesc = "Регистрация",
            registerHeadline = "Давайте\nначнём вместе!",
            registerLabel = "Зарегестрироваться",
            forgotDesc = "Восстановление пароля",
            forgotHeadline = "Давайте\nвосстановим\nваш пароль",
            sendEmailLabel = "Отправить письмо",
            emailFormatError = "* Неправильный формат ввода",
            passwordFormatError = "* Пароль должен содержать мин. 6 символов (a-Z)(0-9)",
            usernameLengthError = "* Никнейм должен содержать 2-15 символов (a-Z)",
            verificationHeadline = "Подтвердите Email",
            verificationTitle = "В ближайшее время на вашу почту придет письмо с ссылкой, по которой нужно перейти",
            verificationButtonLabel = "Отправить ещё раз",
            retryAvailableTimeLabelPrefix = "Будет доступно через ",
            hidePasswordDesc = "Скрыть пароль",
            showPasswordDesc = "Показать пароль",
            loginTermsAndConditionsBody = "Осуществляя вход, вы принимаете ",
            registerTermsAndConditionsBody = "Осуществляя регистарцию, вы принимаете ",
            privacyPolicyLabel = "Политику конфиденциальности",
            authErrorMessage = "Неверный email или пароль. Проверьте данные и попробуйте снова.",
            credentialsErrorMessage = "Некорректные данные. Пожалуйста, заполните все поля правильно.",
            userNotFoundErrorMessage = "Пользователь не найден. Проверьте email или зарегистрируйтесь.",
            tooManyRequestsErrorMessage = "Слишком много попыток. Подождите немного и попробуйте снова.",
            userAlreadyExistsMessage = "Такой пользователь уже есть. Войдите или восстановите пароль.",
            emailAlreadyUsedMessage = "Этот email уже занят. Попробуйте войти или используйте другой email.",
            passwordRecentlyUsedMessage = "Этот пароль слишком похож на предыдущий. Придумайте новый.",
            passwordPersonalDataMessage = "Пароль содержит ваши личные данные. Используйте другой пароль.",
            phoneNotFoundMessage = "Номер телефона не привязан к аккаунту.",
            missingIdFromProviderMessage = "Ошибка входа через соцсеть. Попробуйте снова или другой способ.",
            oauthBadRequestMessage = "Ошибка входа через соцсеть. Попробуйте позже.",
            jwtInvalidMessage = "Ошибка авторизации. Перезайдите в приложение.",
            userBlockedMessage = "Аккаунт заблокирован. Обратитесь в поддержку.",
            emailNotWhitelistedMessage = "Регистрация временно ограничена. Обратитесь в поддержку.",
            invalidCodeMessage = "Неверный код подтверждения. Запросите новый.",
            ipNotWhitelistedMessage = "Доступ ограничен. Попробуйте с другого устройства или сети.",
            anonymousConsoleProhibitedMessage = "Гостевой вход недоступен. Зарегистрируйтесь или войдите.",
            sessionAlreadyExistsMessage = "У вас уже есть активная сессия. Перезайдите в приложение.",
            oauthUnauthorizedMessage = "Ошибка входа через соцсеть. Попробуйте снова.",
            teamInvalidSecretMessage = "Ссылка приглашения устарела. Запросите новую.",
            teamInviteMismatchMessage = "Приглашение не для вашего аккаунта.",
            sessionNotFoundMessage = "Сессия завершена. Войдите снова.",
            identityNotFoundMessage = "Ошибка входа через соцсеть. Попробуйте снова.",
            teamNotFoundMessage = "Группа не найдена. Проверьте ссылку или обратитесь к организатору.",
            teamInviteNotFoundMessage = "Приглашение не найдено. Запросите новое.",
            teamMembershipMismatchMessage = "Ошибка доступа к группе. Обратитесь к организатору.",
            membershipNotFoundMessage = "Вы не состоите в этой группе.",
            teamInviteAlreadyExistsMessage = "Вы уже в этой группе или приглашение уже отправлено.",
            teamAlreadyExistsMessage = "Группа с таким названием уже есть. Выберите другое.",
            membershipAlreadyConfirmedMessage = "Вы уже в этой группе.",
            passwordResetRequiredMessage = "Требуется смена пароля. Проверьте почту.",
            oauthProviderErrorMessage = "Ошибка входа через соцсеть. Попробуйте позже.",
            userCountExceededMessage = "Достигнут лимит пользователей. Обратитесь в поддержку.",
            authMethodUnsupportedMessage = "Этот способ входа временно недоступен.",
            accessDeniedMessage = "У вас нет доступа к этому разделу.",
            networkErrorMessage = "Отсутствует подключение к интернету! Повторите попытку позже",
            otherErrorMessage = "Что-то пошло не так. Попробуйте снова или обратитесь в поддержку."
        )
        val ENGLISH = AuthStrings(
            otherSignInWayTitle = "Or log in via",
            emailLabel = "Email",
            emailPlaceholder = "email@example.com",
            passwordLabel = "Password",
            passwordPlaceholder = "Min. 6 chars (a-Z)(0-9)",
            usernameLabel = "Display name",
            usernamePlaceholder = "First and last name",
            forgotPasswordLabel = "Recover password",
            loginDesc = "Authorization",
            loginHeadline = "Welcome back,\nto your assistant!",
            loginLabel = "Sign in",
            loginViaGoogleLabel = "Google",
            loginViaYandexLabel = "Yandex",
            signUpLabelFirst = "No account? ",
            signUpLabelSecond = "Create one",
            alreadyHaveAccountLabelFirst = "Already have an account? ",
            alreadyHaveAccountLabelSecond = "Log in",
            alreadyHavePasswordLabelFirst = "Have you found the password yet? ",
            alreadyHavePasswordLabelSecond = "Log in",
            registerDesc = "Registration",
            registerHeadline = "Let's start\ntogether!",
            registerLabel = "Register",
            forgotDesc = "Password Recovery",
            forgotHeadline = "Let's restore\nyour\npassword",
            sendEmailLabel = "Send an email",
            emailFormatError = "* Incorrect input format",
            passwordFormatError = "* The password must contain at least 6 characters (a-Z)(0-9)",
            usernameLengthError = "* The nickname must contain 2-15 characters (a-Z)",
            hidePasswordDesc = "Hide password",
            showPasswordDesc = "Show password",
            verificationHeadline = "Confirm the Email",
            verificationTitle = "In the near future, we will send you an email with a link that you will need to click on.",
            verificationButtonLabel = "Send it again",
            retryAvailableTimeLabelPrefix = "It will be available in ",
            loginTermsAndConditionsBody = "By logging in, you agree to the ",
            registerTermsAndConditionsBody = "By registering, you agree to the ",
            privacyPolicyLabel = "Privacy Policy",
            authErrorMessage = "Wrong email or password. Check and try again.",
            credentialsErrorMessage = "Invalid data. Please fill all fields correctly.",
            userNotFoundErrorMessage = "User not found. Check your email or sign up.",
            tooManyRequestsErrorMessage = "Too many attempts. Wait a bit and try again.",
            userAlreadyExistsMessage = "User already exists. Sign in or reset your password.",
            emailAlreadyUsedMessage = "This email is already taken. Sign in or use another email.",
            passwordRecentlyUsedMessage = "This password is too similar to your old one. Choose a new one.",
            passwordPersonalDataMessage = "Password contains personal info. Use a different one.",
            phoneNotFoundMessage = "Phone number not linked to your account.",
            missingIdFromProviderMessage = "Social login failed. Try again or use another method.",
            oauthBadRequestMessage = "Social login error. Please try later.",
            jwtInvalidMessage = "Authorization error. Relaunch the app.",
            userBlockedMessage = "Account blocked. Contact support.",
            emailNotWhitelistedMessage = "Registration is restricted. Contact support.",
            invalidCodeMessage = "Wrong confirmation code. Request a new one.",
            ipNotWhitelistedMessage = "Access restricted. Try from another device or network.",
            anonymousConsoleProhibitedMessage = "Guest access unavailable. Sign up or log in.",
            sessionAlreadyExistsMessage = "You already have an active session. Relogin.",
            oauthUnauthorizedMessage = "Social login failed. Try again.",
            teamInvalidSecretMessage = "Invite link expired. Request a new one.",
            teamInviteMismatchMessage = "This invite is not for your account.",
            sessionNotFoundMessage = "Session expired. Log in again.",
            identityNotFoundMessage = "Social login failed. Try again.",
            teamNotFoundMessage = "Group not found. Check the link or contact the organizer.",
            teamInviteNotFoundMessage = "Invite not found. Request a new one.",
            teamMembershipMismatchMessage = "Group access error. Contact the organizer.",
            membershipNotFoundMessage = "You're not in this group.",
            teamInviteAlreadyExistsMessage = "You're already in this group or invited.",
            teamAlreadyExistsMessage = "Group name already taken. Choose another.",
            membershipAlreadyConfirmedMessage = "You're already in this group.",
            passwordResetRequiredMessage = "Password reset required. Check your email.",
            oauthProviderErrorMessage = "Social login error. Try again later.",
            userCountExceededMessage = "User limit reached. Contact support.",
            authMethodUnsupportedMessage = "This login method is temporarily unavailable.",
            accessDeniedMessage = "You don't have access to this section.",
            networkErrorMessage = "There is no internet connection! Please try again later",
            otherErrorMessage = "Something went wrong. Try again or contact support.",
        )
    }
}

internal val LocalAuthStrings = staticCompositionLocalOf<AuthStrings> {
    error("Auth Strings is not provided")
}

internal fun fetchAuthStrings(language: StudyAssistantLanguage) = when (language) {
    StudyAssistantLanguage.EN -> AuthStrings.ENGLISH
    StudyAssistantLanguage.RU -> AuthStrings.RUSSIAN
}